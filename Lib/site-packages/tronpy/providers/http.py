import os
import requests
from urllib.parse import urljoin
from typing import Any, Union, List
import random
import time
import sys

DEFAULT_TIMEOUT = 10.0
DEFAULT_API_KEYS = [
    '73ec0348-d147-40bc-b3a0-b4c78aa15518',
    'e86d0137-3a87-4dfb-bee3-9d01780a93e4',
    '7bd633b1-b3de-4d65-93ce-3850abda874e',
    'efa23959-ed0c-4689-8b25-13bc1c12207d',
    'edc1ebb2-94fe-4a32-9868-1247362a74ff',
    '886a090b-abf4-4955-bae4-b341c1e29f37',
    '5c9cd2b9-dcfd-4350-84cf-6be064f59db0',
    'e23a2806-661e-4751-a84d-6bb3372b1360',
    'f2907bba-7edf-45d2-908f-aec6c056d139',
    '4f55c0bf-d158-4a5a-943a-30507be889c9',
    '0809d317-7d92-4648-bcbf-3737d6e318e0',
    'e0e118ab-b6f5-462a-a3ac-548a9134023d'
]


class HTTPProvider(object):
    """An HTTP Provider for API request.

    :param endpoint_uri: HTTP API URL base. Default value is ``"https://api.trongrid.io/"``. Can also be configured via
        the ``TRONPY_HTTP_PROVIDER_URI`` environment variable.
    :param timeout: HTTP timeout in seconds.
    :param api_key: TronGRID API Key in str, or list of str.
    """

    def __init__(
        self,
        endpoint_uri: Union[str, dict] = None,
        timeout: float = DEFAULT_TIMEOUT,
        api_key: Union[str, List[str]] = None,
    ):
        super().__init__()

        if endpoint_uri is None:
            self.endpoint_uri = os.environ.get("TRONPY_HTTP_PROVIDER_URI", "https://api.trongrid.io/")
        elif isinstance(endpoint_uri, (dict,)):
            self.endpoint_uri = endpoint_uri["fullnode"]
        elif isinstance(endpoint_uri, (str,)):
            self.endpoint_uri = endpoint_uri
        else:
            raise TypeError("unknown endpoint uri {}".format(endpoint_uri))

        if 'trongrid' in self.endpoint_uri:
            self.use_api_key = True
            if isinstance(api_key, (str,)):
                self._api_keys = [api_key]
            elif isinstance(api_key, (list,)) and api_key:
                self._api_keys = api_key
            else:
                self._api_keys = DEFAULT_API_KEYS.copy()

            self._default_api_keys = self._api_keys.copy()
        else:
            self.use_api_key = False

        self.sess = requests.session()
        self.sess.headers["User-Agent"] = "Tronpy/0.2"

        self.timeout = timeout
        """Request timeout in second."""

    def make_request(self, method: str, params: Any = None) -> dict:
        if self.use_api_key:
            self.sess.headers["Tron-Pro-Api-Key"] = self.random_api_key

        if params is None:
            params = {}
        url = urljoin(self.endpoint_uri, method)
        resp = self.sess.post(url, json=params, timeout=self.timeout)

        if self.use_api_key:
            if resp.status_code == 403 and b'Exceed the user daily usage' in resp.content:
                print("W:", resp.json().get('Error', 'rate limit!'), file=sys.stderr)
                self._handle_rate_limit()
                return self.make_request(method, params)

        resp.raise_for_status()
        return resp.json()

    @property
    def random_api_key(self):
        return random.choice(self._api_keys)

    def _handle_rate_limit(self):
        if len(self._api_keys) > 1:
            self._api_keys.remove(self.sess.headers["Tron-Pro-Api-Key"])
        else:
            print("W: Please add as-many API-Keys in HTTPProvider", file=sys.stderr)
            time.sleep(0.9)
